{"remainingRequest":"E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\src\\views\\basic\\platformArea\\index.vue?vue&type=template&id=7b624584&scoped=true&","dependencies":[{"path":"E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\src\\views\\basic\\platformArea\\index.vue","mtime":1628490102080},{"path":"E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspace\\HKYN\\DKY\\photovoltaic-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}